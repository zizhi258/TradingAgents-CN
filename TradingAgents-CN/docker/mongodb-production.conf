# =============================================================================
# Production MongoDB Configuration for TradingAgents-CN Data Pipeline
# Optimized for financial data storage and high-performance queries
# =============================================================================

# Storage Configuration
storage:
  dbPath: /data/db
  journal:
    enabled: true
    commitIntervalMs: 100
  directoryPerDB: true
  wiredTiger:
    engineConfig:
      cacheSizeGB: 2
      journalCompressor: snappy
      directoryForIndexes: true
    collectionConfig:
      blockCompressor: snappy
    indexConfig:
      prefixCompression: true

# Network Configuration
net:
  port: 27017
  bindIp: 0.0.0.0
  maxIncomingConnections: 1000
  wireObjectCheck: true
  ipv6: false
  compression:
    compressors: snappy,zstd,zlib

# Security Configuration
security:
  authorization: enabled

# Replication (for production cluster setup)
#replication:
#  replSetName: "tradingagents-rs"
#  oplogSizeMB: 2048

# Sharding (for large-scale deployment)
#sharding:
#  clusterRole: shardsvr

# Process Management
processManagement:
  fork: false
  pidFilePath: /var/run/mongodb/mongod.pid
  timeZoneInfo: /usr/share/zoneinfo

# System Log
systemLog:
  destination: file
  logAppend: true
  path: /var/log/mongodb/mongod.log
  verbosity: 1
  quiet: false
  component:
    accessControl:
      verbosity: 1
    command:
      verbosity: 1
    index:
      verbosity: 1
    query:
      verbosity: 1
    replication:
      verbosity: 1
    storage:
      verbosity: 1
      journal:
        verbosity: 1

# Operation Profiling
operationProfiling:
  mode: slowOp
  slowOpThresholdMs: 100
  slowOpSampleRate: 1.0

# Set Parameters for Production Optimization
setParameter:
  # Connection settings
  connPoolMaxShardedConnsPerHost: 200
  connPoolMaxConnsPerHost: 200
  
  # Query optimization
  internalQueryPlanEvaluationMaxResults: 101
  internalQueryPlanEvaluationCollFraction: 0.3
  
  # Write concern
  journalCommitInterval: 100
  
  # Index optimization
  failIndexKeyTooLong: false
  
  # Memory and caching
  wiredTigerConcurrentReadTransactions: 128
  wiredTigerConcurrentWriteTransactions: 128
  
  # Diagnostics
  diagnosticDataCollectionEnabled: true
  
  # Time-series collections optimization
  timeseriesIdleBucketExpiryMemoryUsageThreshold: 104857600
  
  # Authentication
  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256

# =============================================================================
# Comments for Operational Teams
# =============================================================================

# This MongoDB instance is configured for TradingAgents-CN with:
# 1. Optimized storage for financial time-series data
# 2. Enhanced indexing for market data queries
# 3. Compression enabled to reduce storage costs
# 4. Connection pooling for high concurrent access
# 5. Profiling enabled for performance monitoring
#
# Database structure:
# - tradingagents (main database)
#   - market_data (time-series collection for OHLCV data)
#   - news_articles (full-text indexed news with sentiment)
#   - analysis_results (agent analysis outputs)
#   - financial_statements (quarterly/annual reports)
#   - ml_features (machine learning feature store)
#   - user_sessions (web application sessions)
#   - system_logs (application and audit logs)
#
# Index strategy:
# - Compound indexes on (symbol, timestamp) for market queries
# - Text indexes for news search functionality
# - TTL indexes for automatic cleanup of temporary data
# - Partial indexes for better performance on optional fields
#
# Performance considerations:
# - WiredTiger cache sized for available memory
# - Journal compression to reduce I/O overhead
# - Connection limits set for expected concurrent users
# - Slow query profiling enabled for optimization
#
# Monitoring recommendations:
# - Monitor slow queries in the profiler output
# - Check replica lag if using replication
# - Monitor index usage with db.collection.aggregate([{$indexStats:{}}])
# - Watch memory usage and cache hit ratios
# - Set up alerts for connection pool exhaustion
#
# Backup and recovery:
# - Use mongodump/mongorestore for logical backups
# - Consider filesystem snapshots for faster recovery
# - Test restore procedures regularly
# - Document restoration procedures for different scenarios