# =============================================================================
# TradingAgents-CN Monitoring Stack
# Comprehensive monitoring with Prometheus, Grafana, AlertManager, and exporters
# =============================================================================

version: '3.8'

x-logging: &default-logging
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped

networks:
  monitoring:
    driver: bridge
    name: tradingagents-monitoring
  tradingagents-network:
    external: true
    name: tradingagents-network

volumes:
  prometheus_data:
    driver: local
    name: tradingagents_prometheus_data
  grafana_data:
    driver: local
    name: tradingagents_grafana_data
  alertmanager_data:
    driver: local
    name: tradingagents_alertmanager_data

services:
  # =============================================================================
  # Metrics Collection - Prometheus
  # =============================================================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: tradingagents-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.enable-remote-shutdown'
      - '--storage.tsdb.wal-compression'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/alerts.yml:/etc/prometheus/alerts.yml:ro
      - ./docker/recording_rules.yml:/etc/prometheus/recording_rules.yml:ro
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
    networks:
      - monitoring
      - tradingagents-network
    depends_on:
      - alertmanager
    <<: *restart-policy
    <<: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "com.tradingagents.service=prometheus"
      - "com.tradingagents.description=Metrics collection and storage"

  # =============================================================================
  # Alerting - AlertManager
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: tradingagents-alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.advertise-address=0.0.0.0:9093'
      - '--log.level=info'
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./docker/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - ./docker/alertmanager/templates:/etc/alertmanager/templates:ro
    environment:
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ALERT_FROM_EMAIL=${ALERT_FROM_EMAIL}
      - DEFAULT_ALERT_EMAIL=${DEFAULT_ALERT_EMAIL}
      - CRITICAL_ALERT_EMAIL=${CRITICAL_ALERT_EMAIL}
      - DATABASE_TEAM_EMAIL=${DATABASE_TEAM_EMAIL}
      - SECURITY_TEAM_EMAIL=${SECURITY_TEAM_EMAIL}
      - BUSINESS_TEAM_EMAIL=${BUSINESS_TEAM_EMAIL}
      - MARKET_ANALYSIS_TEAM_EMAIL=${MARKET_ANALYSIS_TEAM_EMAIL}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_ROUTING_KEY=${PAGERDUTY_ROUTING_KEY}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    networks:
      - monitoring
    <<: *restart-policy
    <<: *default-logging
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "com.tradingagents.service=alertmanager"
      - "com.tradingagents.description=Alert routing and notifications"

  # =============================================================================
  # Visualization - Grafana
  # =============================================================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: tradingagents-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards/tradingagents:ro
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    environment:
      # Security
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      
      # Server configuration
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000}
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      
      # Database (use SQLite for simplicity)
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      
      # Users and organizations
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      
      # Authentication
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=true
      - GF_AUTH_DISABLE_LOGIN_FORM=false
      
      # Alerting
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
      
      # Plugins
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,natel-discrete-panel,vonage-status-panel
      
      # SMTP for alerts
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}:${SMTP_PORT}
      - GF_SMTP_USER=${SMTP_USERNAME}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${GRAFANA_FROM_EMAIL}
      - GF_SMTP_FROM_NAME=TradingAgents-CN Grafana
      
      # Feature toggles
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      
      # Logs
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=info
    networks:
      - monitoring
    depends_on:
      - prometheus
    <<: *restart-policy
    <<: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "com.tradingagents.service=grafana"
      - "com.tradingagents.description=Metrics visualization and dashboards"

  # =============================================================================
  # System Metrics - Node Exporter
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: tradingagents-node-exporter
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
      - '--collector.interrupts'
      - '--collector.cpu.info'
      - '--collector.textfile.directory=/var/lib/node_exporter/textfile_collector'
    volumes:
      - /:/host:ro,rslave
      - /var/lib/node_exporter/textfile_collector:/var/lib/node_exporter/textfile_collector:ro
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    networks:
      - monitoring
    pid: host
    <<: *restart-policy
    <<: *default-logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      - "com.tradingagents.service=node-exporter"
      - "com.tradingagents.description=System metrics collection"

  # =============================================================================
  # Container Metrics - cAdvisor
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: tradingagents-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    networks:
      - monitoring
    <<: *restart-policy
    <<: *default-logging
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    labels:
      - "com.tradingagents.service=cadvisor"
      - "com.tradingagents.description=Container metrics collection"

  # =============================================================================
  # Database Metrics - MongoDB Exporter
  # =============================================================================
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39.0
    container_name: tradingagents-mongodb-exporter
    command:
      - '--mongodb.uri=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017'
      - '--mongodb.collstats-colls=users,sessions,analysis_results,market_scans'
      - '--mongodb.direct-connect'
      - '--collect-all'
    ports:
      - "${MONGODB_EXPORTER_PORT:-9216}:9216"
    environment:
      - MONGODB_URI=mongodb://admin:${MONGODB_PASSWORD}@mongodb:27017
    networks:
      - monitoring
      - tradingagents-network
    depends_on:
      - mongodb
    <<: *restart-policy
    <<: *default-logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      - "com.tradingagents.service=mongodb-exporter"
      - "com.tradingagents.description=MongoDB metrics collection"

  # =============================================================================
  # Cache Metrics - Redis Exporter
  # =============================================================================
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: tradingagents-redis-exporter
    command:
      - '--redis.addr=redis://redis:6379'
      - '--redis.password=${REDIS_PASSWORD}'
      - '--include-system-metrics'
      - '--check-keys=tradingagents:*'
      - '--check-single-keys=market_scan:*,session:*'
    ports:
      - "${REDIS_EXPORTER_PORT:-9121}:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - monitoring
      - tradingagents-network
    depends_on:
      - redis
    <<: *restart-policy
    <<: *default-logging
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    labels:
      - "com.tradingagents.service=redis-exporter"
      - "com.tradingagents.description=Redis metrics collection"

  # =============================================================================
  # Optional: Log Aggregation - Loki
  # =============================================================================
  loki:
    image: grafana/loki:2.9.0
    container_name: tradingagents-loki
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - ./docker/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    <<: *restart-policy
    <<: *default-logging
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "com.tradingagents.service=loki"
      - "com.tradingagents.description=Log aggregation and storage"

  # =============================================================================
  # Optional: Log Collection - Promtail
  # =============================================================================
  promtail:
    image: grafana/promtail:2.9.0
    container_name: tradingagents-promtail
    volumes:
      - ./docker/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki
    <<: *restart-policy
    <<: *default-logging
    profiles:
      - logging
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      - "com.tradingagents.service=promtail"
      - "com.tradingagents.description=Log collection and forwarding"

  # =============================================================================
  # Optional: Uptime Monitoring - Blackbox Exporter
  # =============================================================================
  blackbox-exporter:
    image: prom/blackbox-exporter:v0.24.0
    container_name: tradingagents-blackbox-exporter
    ports:
      - "${BLACKBOX_EXPORTER_PORT:-9115}:9115"
    volumes:
      - ./docker/blackbox/blackbox.yml:/config/blackbox.yml:ro
    command: --config.file=/config/blackbox.yml
    networks:
      - monitoring
      - tradingagents-network
    <<: *restart-policy
    <<: *default-logging
    profiles:
      - monitoring-extended
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    labels:
      - "com.tradingagents.service=blackbox-exporter"
      - "com.tradingagents.description=HTTP/HTTPS/TCP uptime monitoring"

# Additional volumes for optional services
volumes:
  loki_data:
    driver: local
    name: tradingagents_loki_data