# =============================================================================
# Production Docker Compose Configuration for TradingAgents-CN
# Multi-service orchestration with networking, monitoring, and security
# =============================================================================

version: '3.8'

x-common-variables: &common-variables
  TZ: Asia/Shanghai
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  # Database connections
  TRADINGAGENTS_MONGODB_URL: mongodb://admin:${MONGODB_PASSWORD:-tradingagents123}@mongodb:27017/tradingagents?authSource=admin
  TRADINGAGENTS_REDIS_URL: redis://:${REDIS_PASSWORD:-tradingagents123}@redis:6379
  # Cache configuration
  TRADINGAGENTS_CACHE_TYPE: redis
  # Logging configuration
  TRADINGAGENTS_LOG_LEVEL: ${LOG_LEVEL:-INFO}
  TRADINGAGENTS_LOG_DIR: /app/logs
  # Multi-model configuration
  MULTI_MODEL_ENABLED: "true"
  ROUTING_STRATEGY: ${ROUTING_STRATEGY:-intelligent}
  DEFAULT_COLLABORATION_MODE: ${DEFAULT_COLLABORATION_MODE:-sequential}
  MAX_COST_PER_SESSION: ${MAX_COST_PER_SESSION:-1.0}
  # ChartingArtist configuration
  CHARTING_ARTIST_ENABLED: ${CHARTING_ARTIST_ENABLED:-true}
  CHARTING_ARTIST_API_URL: ${CHARTING_ARTIST_API_URL:-http://charting-service:8002/api}
  CHARTING_ARTIST_CACHE_SIZE: ${CHARTING_ARTIST_CACHE_SIZE:-100}
  CHARTING_ARTIST_MAX_CONCURRENT_JOBS: ${CHARTING_ARTIST_MAX_CONCURRENT_JOBS:-3}
  CHART_STORAGE_PATH: /app/data/attachments/charts
  CHART_CACHE_PATH: /app/data/chart_cache
  CHART_RETENTION_DAYS: ${CHART_RETENTION_DAYS:-30}
  # Security
  DOCKER_CONTAINER: "true"

x-common-logging: &common-logging
  logging:
    driver: json-file
    options:
      max-size: "100m"
      max-file: "5"
      labels: "com.tradingagents.service,com.tradingagents.version"

x-restart-policy: &restart-policy
  restart: unless-stopped

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

services:
  # =============================================================================
  # Core Application Services
  # =============================================================================
  
  # Streamlit Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-1.0.0}
    image: ${REGISTRY:-local}/tradingagents-cn-web:${TAG:-latest}
    container_name: tradingagents-web-${ENVIRONMENT:-prod}
    ports:
      - "${WEB_PORT:-8501}:8501"
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
      # Persistent data volumes
      - app_data:/app/data
      - app_logs:/app/logs
      - app_reports:/app/reports
      - app_config:/app/config
    environment:
      <<: *common-variables
      # Web-specific configuration
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_ENABLE_CORS: false
      STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION: true
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: false
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - frontend
      - backend
    <<: *restart-policy
    <<: *common-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "/usr/local/bin/healthcheck.sh"]
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    labels:
      - "com.tradingagents.service=web"
      - "com.tradingagents.version=${VERSION:-1.0.0}"
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.services.web.loadbalancer.server.port=8501"

  # Market Analysis API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      args:
        BUILD_DATE: ${BUILD_DATE:-unknown}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-1.0.0}
    image: ${REGISTRY:-local}/tradingagents-cn-api:${TAG:-latest}
    container_name: tradingagents-api-${ENVIRONMENT:-prod}
    ports:
      - "${API_PORT:-8000}:8000"
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
      - app_data:/app/data
      - app_logs:/app/logs
      - app_reports:/app/reports
      - app_config:/app/config
    environment:
      <<: *common-variables
      # API-specific configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_WORKERS: ${API_WORKERS:-4}
      ENABLE_PERFORMANCE_MONITORING: "true"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1.5G
          cpus: '1.0'
      replicas: ${API_REPLICAS:-2}
    labels:
      - "com.tradingagents.service=api"
      - "com.tradingagents.version=${VERSION:-1.0.0}"

  # Market Analysis Scheduler
  scheduler:
    image: ${REGISTRY:-local}/tradingagents-cn-api:${TAG:-latest}
    container_name: tradingagents-scheduler-${ENVIRONMENT:-prod}
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
      - app_data:/app/data
      - app_logs:/app/logs
      - app_reports:/app/reports
      - app_config:/app/config
    environment:
      <<: *common-variables
      SCHEDULER_ENABLED: "true"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    command: ["/usr/local/bin/api-entrypoint.sh", "scheduler"]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "pgrep", "-f", "scheduler"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    labels:
      - "com.tradingagents.service=scheduler"

  # Celery Worker for Background Processing
  worker:
    image: ${REGISTRY:-local}/tradingagents-cn-api:${TAG:-latest}
    container_name: tradingagents-worker-${ENVIRONMENT:-prod}
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
      - app_data:/app/data
      - app_logs:/app/logs
      - app_reports:/app/reports
      - app_config:/app/config
    environment:
      <<: *common-variables
      CELERY_WORKER_CONCURRENCY: ${CELERY_CONCURRENCY:-4}
      CELERY_MAX_TASKS_PER_CHILD: 100
      CELERY_TASK_TIME_LIMIT: 3600
      CELERY_TASK_SOFT_TIME_LIMIT: 3000
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    command: ["/usr/local/bin/api-entrypoint.sh", "worker"]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "celery", "-A", "tradingagents.services.worker", "inspect", "ping"]
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      replicas: ${WORKER_REPLICAS:-2}
    labels:
      - "com.tradingagents.service=worker"

  # ChartingArtist Visualization Service
  charting-service:
    image: ${REGISTRY:-local}/tradingagents-cn-api:${TAG:-latest}
    container_name: tradingagents-charting-${ENVIRONMENT:-prod}
    ports:
      - "${CHARTING_PORT:-8002}:8002"
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
      - app_data:/app/data
      - app_logs:/app/logs
      - app_charts:/app/data/attachments/charts
      - chart_cache:/app/data/chart_cache
    environment:
      <<: *common-variables
      # ChartingArtist service specific settings
      SERVICE_TYPE: "charting"
      API_HOST: 0.0.0.0
      API_PORT: 8002
      CHARTING_WORKER_CONCURRENCY: ${CHARTING_WORKER_CONCURRENCY:-2}
      ENABLE_CHART_GENERATION: "true"
      ENABLE_PERFORMANCE_MONITORING: "true"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    command: ["/usr/local/bin/api-entrypoint.sh", "charting"]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/charts/health"]
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    labels:
      - "com.tradingagents.service=charting"
      - "com.tradingagents.version=${VERSION:-1.0.0}"
      - "traefik.enable=true"
      - "traefik.http.routers.charting.rule=PathPrefix(`/api/charts`)"
      - "traefik.http.services.charting.loadbalancer.server.port=8002"

  # Chart Cleanup Worker
  chart-cleanup:
    image: ${REGISTRY:-local}/tradingagents-cn-api:${TAG:-latest}
    container_name: tradingagents-chart-cleanup-${ENVIRONMENT:-prod}
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
      - app_charts:/app/data/attachments/charts
      - chart_cache:/app/data/chart_cache
    environment:
      <<: *common-variables
      CLEANUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      CLEANUP_RETENTION_DAYS: ${CHART_RETENTION_DAYS:-30}
    depends_on:
      - charting-service
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    command: ["/usr/local/bin/api-entrypoint.sh", "chart-cleanup"]
    profiles:
      - cleanup
    labels:
      - "com.tradingagents.service=chart-cleanup"

  # Celery Beat Scheduler
  beat:
    image: ${REGISTRY:-local}/tradingagents-cn-api:${TAG:-latest}
    container_name: tradingagents-beat-${ENVIRONMENT:-prod}
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
        read_only: true
      - app_data:/app/data
      - app_logs:/app/logs
      - app_config:/app/config
      - beat_schedule:/app/data/beat
    environment:
      <<: *common-variables
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    command: ["/usr/local/bin/api-entrypoint.sh", "beat"]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "pgrep", "-f", "celery.*beat"]
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "com.tradingagents.service=beat"

  # =============================================================================
  # Data Store Services
  # =============================================================================

  # MongoDB Database
  mongodb:
    image: mongo:6.0-jammy
    container_name: tradingagents-mongodb-${ENVIRONMENT:-prod}
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-tradingagents123}
      MONGO_INITDB_DATABASE: tradingagents
    volumes:
      - mongodb_data:/data/db
      - mongodb_logs:/var/log/mongodb
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./docker/mongodb.conf:/etc/mongod.conf:ro
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    command: ["mongod", "--config", "/etc/mongod.conf"]
    labels:
      - "com.tradingagents.service=mongodb"

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: tradingagents-redis-${ENVIRONMENT:-prod}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - backend
    <<: *restart-policy
    <<: *common-logging
    command: ["redis-server", "/etc/redis/redis.conf", "--requirepass", "${REDIS_PASSWORD:-tradingagents123}"]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "com.tradingagents.service=redis"

  # =============================================================================
  # Monitoring & Management Services
  # =============================================================================

  # Flower - Celery Monitoring
  flower:
    image: ${REGISTRY:-local}/tradingagents-cn-api:${TAG:-latest}
    container_name: tradingagents-flower-${ENVIRONMENT:-prod}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    environment:
      <<: *common-variables
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USERNAME:-admin}:${FLOWER_PASSWORD:-tradingagents123}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend
      - monitoring
    <<: *restart-policy
    <<: *common-logging
    command: ["/usr/local/bin/api-entrypoint.sh", "flower"]
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:5555/api/workers"]
    profiles:
      - monitoring
    labels:
      - "com.tradingagents.service=flower"

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: tradingagents-prometheus-${ENVIRONMENT:-prod}
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    <<: *restart-policy
    <<: *common-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
    profiles:
      - monitoring
    labels:
      - "com.tradingagents.service=prometheus"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:10.0.0
    container_name: tradingagents-grafana-${ENVIRONMENT:-prod}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USERNAME:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-tradingagents123}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    networks:
      - monitoring
    <<: *restart-policy
    <<: *common-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    profiles:
      - monitoring
    labels:
      - "com.tradingagents.service=grafana"

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: tradingagents-nginx-${ENVIRONMENT:-prod}
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
      - api
    networks:
      - frontend
    <<: *restart-policy
    <<: *common-logging
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost/health"]
    profiles:
      - proxy
    labels:
      - "com.tradingagents.service=nginx"

# =============================================================================
# Network Configuration
# =============================================================================

networks:
  frontend:
    driver: bridge
    name: tradingagents-frontend-${ENVIRONMENT:-prod}
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

  backend:
    driver: bridge
    name: tradingagents-backend-${ENVIRONMENT:-prod}
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

  monitoring:
    driver: bridge
    name: tradingagents-monitoring-${ENVIRONMENT:-prod}
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16

# =============================================================================
# Volume Configuration
# =============================================================================

volumes:
  # Application volumes
  app_data:
    driver: local
    name: tradingagents_app_data_${ENVIRONMENT:-prod}
  
  app_logs:
    driver: local
    name: tradingagents_app_logs_${ENVIRONMENT:-prod}
  
  app_reports:
    driver: local
    name: tradingagents_app_reports_${ENVIRONMENT:-prod}
  
  app_config:
    driver: local
    name: tradingagents_app_config_${ENVIRONMENT:-prod}

  # ChartingArtist volumes
  app_charts:
    driver: local
    name: tradingagents_app_charts_${ENVIRONMENT:-prod}
  
  chart_cache:
    driver: local
    name: tradingagents_chart_cache_${ENVIRONMENT:-prod}

  # Database volumes
  mongodb_data:
    driver: local
    name: tradingagents_mongodb_data_${ENVIRONMENT:-prod}
  
  mongodb_logs:
    driver: local
    name: tradingagents_mongodb_logs_${ENVIRONMENT:-prod}
  
  redis_data:
    driver: local
    name: tradingagents_redis_data_${ENVIRONMENT:-prod}

  # Monitoring volumes
  prometheus_data:
    driver: local
    name: tradingagents_prometheus_data_${ENVIRONMENT:-prod}
  
  grafana_data:
    driver: local
    name: tradingagents_grafana_data_${ENVIRONMENT:-prod}

  # Service-specific volumes
  beat_schedule:
    driver: local
    name: tradingagents_beat_schedule_${ENVIRONMENT:-prod}
  
  nginx_logs:
    driver: local
    name: tradingagents_nginx_logs_${ENVIRONMENT:-prod}
