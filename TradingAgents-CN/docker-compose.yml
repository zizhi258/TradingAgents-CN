
services:
  # Streamlit Web 应用服务
  web:
    build: .
    image: tradingagents-cn:latest
    container_name: TradingAgents-web
    ports:
      - "8501:8501"
    volumes:
      - .env:/app/.env
      # 开发环境代码映射
      - ./web:/app/web
      - ./tradingagents:/app/tradingagents
      - ./scripts:/app/scripts
      # 日志目录映射 - 重要：将容器内日志映射到当前项目的logs目录
      - ./logs:/app/logs
      # 配置目录映射 - 重要：持久化token统计和其他配置数据
      - ./config:/app/config
      # 多模型数据持久化
      - ./data:/app/data
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      PYTHONIOENCODING: utf-8
      # 时区配置
      TZ: "Asia/Shanghai"
      # 日志配置
      TRADINGAGENTS_LOG_LEVEL: "INFO"
      TRADINGAGENTS_LOG_DIR: "/app/logs"
      TRADINGAGENTS_LOG_FILE: "/app/logs/tradingagents.log"
      TRADINGAGENTS_LOG_MAX_SIZE: "100MB"
      TRADINGAGENTS_LOG_BACKUP_COUNT: "5"
      # Docker专用数据库配置（覆盖.env中的本地配置）
      TRADINGAGENTS_MONGODB_URL: mongodb://admin:tradingagents123@mongodb:27017/tradingagents?authSource=admin
      TRADINGAGENTS_REDIS_URL: redis://:tradingagents123@redis:6379
      TRADINGAGENTS_CACHE_TYPE: redis
      # 统一为进度跟踪启用Redis（AsyncProgressTracker使用这些变量）
      REDIS_ENABLED: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: tradingagents123
      REDIS_DB: 0
      # MongoDB 缓存（供 DatabaseManager 使用）
      MONGODB_ENABLED: "true"
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: tradingagents123
      MONGODB_DATABASE: tradingagents
      MONGODB_AUTH_SOURCE: admin
      # 邮件发送配置（可选）
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-465}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      # 可选：使用 Brevo HTTP API 发送邮件，避免SMTP受限
      BREVO_API_KEY: ${BREVO_API_KEY}
      BREVO_USE_HTTP_API: ${BREVO_USE_HTTP_API:-false}
      # Docker环境标识和PDF支持
      DOCKER_CONTAINER: "true"
      DISPLAY: ":99"
      # 多模型协作配置
      MULTI_MODEL_ENABLED: "true"
      ROUTING_STRATEGY: "${ROUTING_STRATEGY:-intelligent}"
      # ChartingArtist LLM 绘图配置
      CHARTING_ARTIST_RENDER_MODE: "${CHARTING_ARTIST_RENDER_MODE:-python}"
      CHARTING_ARTIST_LLM_MODEL: "${CHARTING_ARTIST_LLM_MODEL:-moonshotai/Kimi-K2-Instruct}"
      CHARTING_ARTIST_LLM_ENABLED: "${CHARTING_ARTIST_LLM_ENABLED:-true}"
      # SiliconFlow API (用于Kimi等)
      SILICONFLOW_API_KEY: ${SILICONFLOW_API_KEY}
      SILICONFLOW_BASE_URL: ${SILICONFLOW_BASE_URL:-https://api.siliconflow.cn/v1}
      DEFAULT_COLLABORATION_MODE: "${DEFAULT_COLLABORATION_MODE:-sequential}"
      MAX_COST_PER_SESSION: "${MAX_COST_PER_SESSION:-1.0}"
      ENABLE_PERFORMANCE_MONITORING: "${ENABLE_PERFORMANCE_MONITORING:-true}"
      # 兼容新版 Google GenAI SDK 的密钥变量名
      GEMINI_API_KEY: ${GEMINI_API_KEY:-${GOOGLE_AI_API_KEY:-${GOOGLE_API_KEY:-}}}
      # Gemini-API(兼容) 反代渠道
      GEMINI_API_COMPAT_API_KEY: ${GEMINI_API_COMPAT_API_KEY}
      GEMINI_API_COMPAT_BASE_URL: ${GEMINI_API_COMPAT_BASE_URL:-http://localhost:8080/v1}
      # 金融与数据源配置（确保真实数据）
      TUSHARE_TOKEN: ${TUSHARE_TOKEN}
      DEFAULT_CHINA_DATA_SOURCE: ${DEFAULT_CHINA_DATA_SOURCE:-tushare}
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      # 禁用本地模拟图表（仅真实数据）
      CHARTING_ARTIST_ENABLED: ${CHARTING_ARTIST_ENABLED:-true}
      # ChartingArtist API URL (连接到内部api服务)
      CHARTING_ARTIST_API_URL: "http://api:8000/api"
      # Market API base URL (new data endpoints)
      MARKET_API_BASE_URL: "http://api:8000"
    # 🔧 DNS 配置 - 修复 Brevo SMTP DNS 劫持问题
    dns:
      - 8.8.8.8      # Google Public DNS
      - 1.1.1.1      # Cloudflare DNS
      - 114.114.114.114  # 114 DNS (中国)
    command: /usr/local/bin/start-xvfb.sh python -m streamlit run web/app.py --server.address=0.0.0.0 --server.port=8501
    depends_on:
      - mongodb
      - redis
      - api
    networks:
      - tradingagents-network
    # 健康检查 - 多模型系统兼容性检查
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8501/_stcore/health || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    # 重启策略
    restart: unless-stopped
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # MongoDB数据库服务
  mongodb:
    image: mongo:4.4
    container_name: tradingagents-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: tradingagents123
      MONGO_INITDB_DATABASE: tradingagents
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - tradingagents-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis缓存服务
  redis:
    image: redis:latest
    container_name: tradingagents-redis
    restart: unless-stopped
    # ports:
    #   - "6380:6379"  # 不暴露到宿主机，只在Docker网络内使用
    command: redis-server --appendonly yes --requirepass tradingagents123
    volumes:
      - redis_data:/data
    networks:
      - tradingagents-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis Commander管理界面
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    container_name: tradingagents-redis-commander
    restart: unless-stopped
    # ports:
    #   - "8081:8081"  # 临时禁用Redis Commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:tradingagents123
    networks:
      - tradingagents-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Mongo Express管理界面 (可选)
  mongo-express:
    image: mongo-express:latest
    container_name: tradingagents-mongo-express
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: tradingagents123
      ME_CONFIG_MONGODB_URL: mongodb://admin:tradingagents123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: tradingagents123
    networks:
      - tradingagents-network
    depends_on:
      - mongodb
    profiles:
      - management  # 使用 --profile management 启动

  # 邮件研报调度服务
  scheduler:
    build: .
    image: tradingagents-cn:latest
    container_name: tradingagents-scheduler
    volumes:
      - .env:/app/.env
      - ./tradingagents:/app/tradingagents
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./config:/app/config
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      LANG: C.UTF-8
      LC_ALL: C.UTF-8
      PYTHONIOENCODING: utf-8
      TZ: "Asia/Shanghai"
      # 启用调度服务
      SCHEDULER_ENABLED: "true"
      # MongoDB配置（URL供旧组件；以下开关供DatabaseManager）
      TRADINGAGENTS_MONGODB_URL: mongodb://admin:tradingagents123@mongodb:27017/tradingagents?authSource=admin
      MONGODB_ENABLED: "true"
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: tradingagents123
      MONGODB_DATABASE: tradingagents
      MONGODB_AUTH_SOURCE: admin
      # Redis配置
      TRADINGAGENTS_REDIS_URL: redis://:tradingagents123@redis:6379
      REDIS_ENABLED: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: tradingagents123
      REDIS_DB: 0
      # 日志配置
      TRADINGAGENTS_LOG_LEVEL: "INFO"
      TRADINGAGENTS_LOG_DIR: "/app/logs"
      TRADINGAGENTS_LOG_FILE: "/app/logs/scheduler.log"
    # 🔧 DNS 配置 - 修复 Brevo SMTP DNS 劫持问题
    dns:
      - 8.8.8.8      # Google Public DNS
      - 1.1.1.1      # Cloudflare DNS
      - 114.114.114.114  # 114 DNS (中国)
    command: python -m tradingagents.services.scheduler.run
    depends_on:
      - mongodb
      - redis
    networks:
      - tradingagents-network
    restart: unless-stopped
    profiles:
      - scheduler  # 使用 --profile scheduler 启动，或添加到默认启动

  # API 服务
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    image: tradingagents-cn-api:latest
    container_name: tradingagents-api
    restart: unless-stopped
    ports:
      - "8899:8000"
    volumes:
      - .env:/app/.env
      - ./tradingagents:/app/tradingagents
      - ./scripts:/app/scripts
      - ./logs:/app/logs
      - ./config:/app/config
      - ./data:/app/data
    env_file:
      - .env
    environment:
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      TZ: "Asia/Shanghai"
      # MongoDB配置（URL供旧组件；以下开关供DatabaseManager）
      TRADINGAGENTS_MONGODB_URL: mongodb://admin:tradingagents123@mongodb:27017/tradingagents?authSource=admin
      MONGODB_ENABLED: "true"
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_USERNAME: admin
      MONGODB_PASSWORD: tradingagents123
      MONGODB_DATABASE: tradingagents
      MONGODB_AUTH_SOURCE: admin
      # Redis配置（URL供旧组件；以下开关供DatabaseManager）
      TRADINGAGENTS_REDIS_URL: redis://:tradingagents123@redis:6379
      REDIS_ENABLED: "true"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: tradingagents123
      REDIS_DB: 0
      # 启用ChartingArtist
      CHARTING_ARTIST_ENABLED: ${CHARTING_ARTIST_ENABLED:-true}
      # 金融与数据源配置（API服务也需要）
      TUSHARE_TOKEN: ${TUSHARE_TOKEN}
      DEFAULT_CHINA_DATA_SOURCE: ${DEFAULT_CHINA_DATA_SOURCE:-tushare}
      FINNHUB_API_KEY: ${FINNHUB_API_KEY}
      # API配置
      API_HOST: "0.0.0.0"
      API_PORT: "8000"
      API_WORKERS: "2"
      # 日志配置
      TRADINGAGENTS_LOG_LEVEL: "INFO"
      TRADINGAGENTS_LOG_DIR: "/app/logs"
      TRADINGAGENTS_LOG_FILE: "/app/logs/api.log"
    # DNS 配置
    dns:
      - 8.8.8.8      # Google Public DNS
      - 1.1.1.1      # Cloudflare DNS
      - 114.114.114.114  # 114 DNS (中国)
    depends_on:
      - mongodb
      - redis
    networks:
      - tradingagents-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

# 数据卷定义
volumes:
  mongodb_data:
    driver: local
    name: tradingagents_mongodb_data
  redis_data:
    driver: local
    name: tradingagents_redis_data

# 网络定义
networks:
  tradingagents-network:
    driver: bridge
    name: tradingagents-network
