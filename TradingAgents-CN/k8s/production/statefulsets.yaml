# =============================================================================
# Production StatefulSets for Databases
# =============================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: tradingagents-cn
  labels:
    app: mongodb
    component: database
    tier: data
spec:
  serviceName: mongodb-headless
  replicas: 3
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        component: database
        tier: data
      annotations:
        sidecar.istio.io/inject: "false"  # Database doesn't need service mesh
    spec:
      serviceAccountName: tradingagents-service-account
      priorityClassName: tradingagents-high-priority
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: mongodb
        image: mongo:6.0-jammy
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tradingagents-secrets
              key: MONGODB_PASSWORD
        - name: MONGO_INITDB_DATABASE
          value: "tradingagents"
        
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "2000m"
            memory: "8Gi"
            ephemeral-storage: "5Gi"
        
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        
        command:
        - mongod
        - --config
        - /etc/mongod/mongod.conf
        - --replSet
        - rs0
        
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /etc/mongod
        - name: mongodb-init
          mountPath: /docker-entrypoint-initdb.d
      
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
      - name: mongodb-init
        configMap:
          name: mongodb-init-scripts
      
      terminationGracePeriodSeconds: 60
      
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app: mongodb
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "gp3-encrypted"
      resources:
        requests:
          storage: 100Gi
---
# =============================================================================
# Redis StatefulSet for High Availability
# =============================================================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: tradingagents-cn
  labels:
    app: redis
    component: cache
    tier: data
spec:
  serviceName: redis-headless
  replicas: 3
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        component: cache
        tier: data
      annotations:
        sidecar.istio.io/inject: "false"  # Cache doesn't need service mesh
    spec:
      serviceAccountName: tradingagents-service-account
      priorityClassName: tradingagents-high-priority
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: tradingagents-secrets
              key: REDIS_PASSWORD
        
        resources:
          requests:
            cpu: "200m"
            memory: "512Mi"
            ephemeral-storage: "1Gi"
          limits:
            cpu: "1000m"
            memory: "4Gi"
            ephemeral-storage: "5Gi"
        
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
        
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --raw
            - incr
            - ping
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        
        startupProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20
        
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
      
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      
      terminationGracePeriodSeconds: 30
      
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: redis
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "gp3-encrypted"
      resources:
        requests:
          storage: 20Gi
---
# =============================================================================
# Persistent Volume Claims for Application Data
# =============================================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tradingagents-data-pvc
  namespace: tradingagents-cn
  labels:
    app: tradingagents
    component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  storageClassName: efs-storage-class
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tradingagents-logs-pvc
  namespace: tradingagents-cn
  labels:
    app: tradingagents
    component: logs
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: efs-storage-class
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tradingagents-reports-pvc
  namespace: tradingagents-cn
  labels:
    app: tradingagents
    component: reports
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  storageClassName: efs-storage-class
---
# =============================================================================
# Horizontal Pod Autoscalers
# =============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tradingagents-api-hpa
  namespace: tradingagents-cn
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tradingagents-api-blue  # Updated by CI/CD
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tradingagents-web-hpa
  namespace: tradingagents-cn
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tradingagents-web-blue  # Updated by CI/CD
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 180
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
      selectPolicy: Min
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tradingagents-worker-hpa
  namespace: tradingagents-cn
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tradingagents-worker-blue  # Updated by CI/CD
  minReplicas: 3
  maxReplicas: 12
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 80
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 3
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 20
        periodSeconds: 60
      - type: Pods
        value: 1
        periodSeconds: 60
      selectPolicy: Min