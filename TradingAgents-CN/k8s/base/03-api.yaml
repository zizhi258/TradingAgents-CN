# =============================================================================
# Market Analysis API Deployment and Service
# =============================================================================
apiVersion: v1
kind: Service
metadata:
  name: api-service
  namespace: tradingagents-cn
  labels:
    app.kubernetes.io/name: tradingagents-api
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: tradingagents-platform
spec:
  selector:
    app.kubernetes.io/name: tradingagents-api
  ports:
    - name: http
      port: 8000
      targetPort: 8000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tradingagents-api
  namespace: tradingagents-cn
  labels:
    app.kubernetes.io/name: tradingagents-api
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: tradingagents-platform
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: tradingagents-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tradingagents-api
        app.kubernetes.io/component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
        - name: api
          image: your-registry.com/tradingagents-cn-api:latest
          ports:
            - containerPort: 8000
              name: http
          envFrom:
            - configMapRef:
                name: tradingagents-config
            - secretRef:
                name: tradingagents-secrets
          env:
            - name: SERVICE_TYPE
              value: "api"
          volumeMounts:
            - name: app-data
              mountPath: /app/data
            - name: app-logs
              mountPath: /app/logs
            - name: app-reports
              mountPath: /app/reports
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: "1.5Gi"
              cpu: "1000m"
            limits:
              memory: "3Gi"
              cpu: "2000m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: app-data
          persistentVolumeClaim:
            claimName: app-data-pvc
        - name: app-logs
          persistentVolumeClaim:
            claimName: app-logs-pvc
        - name: app-reports
          persistentVolumeClaim:
            claimName: app-reports-pvc
      terminationGracePeriodSeconds: 30
---
# =============================================================================
# Horizontal Pod Autoscaler for API
# =============================================================================
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tradingagents-api-hpa
  namespace: tradingagents-cn
  labels:
    app.kubernetes.io/name: tradingagents-api
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tradingagents-api
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30