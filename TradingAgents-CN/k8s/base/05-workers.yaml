# =============================================================================
# Background Services: Scheduler, Worker, Beat
# =============================================================================

# Scheduler Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tradingagents-scheduler
  namespace: tradingagents-cn
  labels:
    app.kubernetes.io/name: tradingagents-scheduler
    app.kubernetes.io/component: scheduler
    app.kubernetes.io/part-of: tradingagents-platform
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tradingagents-scheduler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tradingagents-scheduler
        app.kubernetes.io/component: scheduler
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
        - name: scheduler
          image: your-registry.com/tradingagents-cn-api:latest
          command: ["/usr/local/bin/api-entrypoint.sh", "scheduler"]
          envFrom:
            - configMapRef:
                name: tradingagents-config
            - secretRef:
                name: tradingagents-secrets
          env:
            - name: SCHEDULER_ENABLED
              value: "true"
          volumeMounts:
            - name: app-data
              mountPath: /app/data
            - name: app-logs
              mountPath: /app/logs
            - name: app-reports
              mountPath: /app/reports
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - scheduler
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: app-data
          persistentVolumeClaim:
            claimName: app-data-pvc
        - name: app-logs
          persistentVolumeClaim:
            claimName: app-logs-pvc
        - name: app-reports
          persistentVolumeClaim:
            claimName: app-reports-pvc
---
# Celery Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tradingagents-worker
  namespace: tradingagents-cn
  labels:
    app.kubernetes.io/name: tradingagents-worker
    app.kubernetes.io/component: worker
    app.kubernetes.io/part-of: tradingagents-platform
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: tradingagents-worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tradingagents-worker
        app.kubernetes.io/component: worker
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
        - name: worker
          image: your-registry.com/tradingagents-cn-api:latest
          command: ["/usr/local/bin/api-entrypoint.sh", "worker"]
          envFrom:
            - configMapRef:
                name: tradingagents-config
            - secretRef:
                name: tradingagents-secrets
          env:
            - name: CELERY_WORKER_CONCURRENCY
              value: "4"
            - name: CELERY_MAX_TASKS_PER_CHILD
              value: "100"
            - name: CELERY_TASK_TIME_LIMIT
              value: "3600"
            - name: CELERY_TASK_SOFT_TIME_LIMIT
              value: "3000"
          volumeMounts:
            - name: app-data
              mountPath: /app/data
            - name: app-logs
              mountPath: /app/logs
            - name: app-reports
              mountPath: /app/reports
          livenessProbe:
            exec:
              command:
                - celery
                - -A
                - tradingagents.services.worker
                - inspect
                - ping
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 15
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - celery
                - -A
                - tradingagents.services.worker
                - inspect
                - ping
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: "2Gi"
              cpu: "1000m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: app-data
          persistentVolumeClaim:
            claimName: app-data-pvc
        - name: app-logs
          persistentVolumeClaim:
            claimName: app-logs-pvc
        - name: app-reports
          persistentVolumeClaim:
            claimName: app-reports-pvc
---
# Celery Beat Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tradingagents-beat
  namespace: tradingagents-cn
  labels:
    app.kubernetes.io/name: tradingagents-beat
    app.kubernetes.io/component: scheduler
    app.kubernetes.io/part-of: tradingagents-platform
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tradingagents-beat
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tradingagents-beat
        app.kubernetes.io/component: scheduler
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        fsGroup: 1001
      containers:
        - name: beat
          image: your-registry.com/tradingagents-cn-api:latest
          command: ["/usr/local/bin/api-entrypoint.sh", "beat"]
          envFrom:
            - configMapRef:
                name: tradingagents-config
            - secretRef:
                name: tradingagents-secrets
          volumeMounts:
            - name: app-data
              mountPath: /app/data
            - name: app-logs
              mountPath: /app/logs
            - name: beat-schedule
              mountPath: /app/data/beat
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - celery.*beat
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
      volumes:
        - name: app-data
          persistentVolumeClaim:
            claimName: app-data-pvc
        - name: app-logs
          persistentVolumeClaim:
            claimName: app-logs-pvc
        - name: beat-schedule
          persistentVolumeClaim:
            claimName: beat-schedule-pvc
---
# Horizontal Pod Autoscaler for Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: tradingagents-worker-hpa
  namespace: tradingagents-cn
  labels:
    app.kubernetes.io/name: tradingagents-worker
    app.kubernetes.io/component: autoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: tradingagents-worker
  minReplicas: 3
  maxReplicas: 12
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 25
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 30