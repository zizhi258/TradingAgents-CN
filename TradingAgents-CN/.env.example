# TradingAgents-CN 环境变量配置示例
# 🔐 重要：复制此文件为 .env 并填入您的真实API密钥
# ⚠️  警告：.env文件包含敏感信息，请勿提交到Git仓库

# ===== 必需的API密钥 =====

# 📊 FinnHub API 密钥 (必需，用于获取美股金融数据)
# 获取地址: https://finnhub.io/
# 免费账户每分钟60次请求，足够日常使用
# 格式: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
FINNHUB_API_KEY=your_finnhub_api_key_here

# 📈 Tushare API Token (推荐，专业的中国金融数据源)
# 获取地址: https://tushare.pro/register?reg=128886
# 获取步骤：
# 1. 注册Tushare账号 -> 邮箱验证
# 2. 登录后进入个人中心 -> 获取Token
# 3. 复制Token（格式：xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx）
# 注意：免费用户有调用频率限制，建议升级积分获得更高权限
TUSHARE_TOKEN=your_tushare_token_here
TUSHARE_ENABLED=false
# 注意：支持多种布尔值格式 (true/True/TRUE/1/yes/on 表示启用)

# 📦 本地回放模式（可选，用于离线演示/无Token）
# 指向包含样本数据的目录（例如 output/data），文件命名：
#  - daily_{symbol}.csv
#  - info_{symbol}.json
#  - financials_{symbol}.json (可选)
# LOCAL_TUSHARE_OUTPUT_DIR=/absolute/path/to/output/data

# 🎯 默认中国股票数据源 (推荐设置为akshare)
# 可选值: akshare, tushare, baostock
DEFAULT_CHINA_DATA_SOURCE=akshare

# ===== 多模型协作功能配置 =====
# ⚡ 核心功能开关

# 🤖 启用多模型协作功能 (推荐启用)
MULTI_MODEL_ENABLED=true

# 🧠 智能路由策略 (可选值: intelligent, random, round_robin)
ROUTING_STRATEGY=intelligent

# 🤝 默认协作模式 (可选值: sequential, parallel, debate)
DEFAULT_COLLABORATION_MODE=sequential

# 💰 每个会话最大成本限制 (USD)
MAX_COST_PER_SESSION=1.0

# 📈 启用性能监控
ENABLE_PERFORMANCE_MONITORING=true

# 🎨 用户友好的错误处理 (推荐启用)
ENABLE_USER_FRIENDLY_ERRORS=true

# ===== AI模型API密钥 =====

# 🚀 DeepSeek API 密钥 (推荐，性价比最高的国产大模型)
# 获取地址: https://platform.deepseek.com/
# 支持模型: deepseek-chat (V3), deepseek-reasoner (R1)
# API特性: 64K上下文，32K默认输出，OpenAI兼容格式
# 获取步骤：
# 1. 注册DeepSeek账号 -> 登录控制台
# 2. 进入API Keys页面 -> 创建新的API Key
# 3. 复制API Key（格式：sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx）
DEEPSEEK_API_KEY=your_deepseek_api_key_here
DEEPSEEK_BASE_URL=https://api.deepseek.com
DEEPSEEK_ENABLED=true
# 注意：支持多种布尔值格式 (true/True/TRUE/1/yes/on 表示启用)

# 🌟 Google Gemini API 密钥 (推荐，免费额度大)
# 获取地址: https://ai.google.dev/
# 支持环境变量: GEMINI_API_KEY 或 GOOGLE_API_KEY
# 格式: AIza...
# 注意: Gemini 2.5 系列模型支持65K输出、1M输入token
GEMINI_API_KEY=your_gemini_api_key_here

# 🧭 OpenRouter 聚合平台（可选，含Gemini/Claude/OpenAI/Llama等）
# 获取地址: https://openrouter.ai/
# 模型ID格式: provider/model （例如 google/gemini-2.5-pro）
OPENROUTER_API_KEY=
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1

# 🌐 SiliconFlow API 密钥 (推荐，聚合多模型平台)
# 获取地址: https://cloud.siliconflow.cn/
# 支持模型: 聚合DeepSeek, GLM, Qwen, Kimi等多家模型
# API特性: 统一入口，多模型选择，OpenAI兼容格式
# 获取步骤：
# 1. 注册SiliconFlow账号 -> 登录控制台
# 2. 进入API Keys页面 -> 创建新的API Key
# 3. 复制API Key（格式：sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx）
SILICONFLOW_API_KEY=your_siliconflow_api_key_here
SILICONFLOW_BASE_URL=https://api.siliconflow.cn/v1
SILICONFLOW_ENABLED=true
# 注意：支持多种布尔值格式 (true/True/TRUE/1/yes/on 表示启用)

# ===== 其他可选配置 =====

# ===== 多模型协作配置 =====

# 🤖 多模型协作启用开关 (默认启用)
# 设置为 true 启用多模型协作分析功能
MULTI_MODEL_ENABLED=true

# 🧠 智能路由策略 (可选值: intelligent, cost_first, balanced, performance_first)
# intelligent: AI自动选择最适合的模型
# cost_first: 优先选择成本最低的模型
# balanced: 平衡成本和性能
# performance_first: 优先选择性能最好的模型
ROUTING_STRATEGY=intelligent

# 🤝 默认协作模式 (可选值: sequential, parallel, debate)
# sequential: 串行协作，智能体依次分析
# parallel: 并行协作，智能体同时分析
# debate: 辩论协作，智能体互相辩论
DEFAULT_COLLABORATION_MODE=sequential

# 💰 每次分析最大成本限制 (美元)
MAX_COST_PER_SESSION=1.0

# 📊 启用性能监控 (监控API调用性能和成本)
ENABLE_PERFORMANCE_MONITORING=true

# ===== 项目配置 =====

# 结果存储目录
TRADINGAGENTS_RESULTS_DIR=./results

# 数据存储目录 (可选，默认使用./data)
TRADINGAGENTS_DATA_DIR=./data

# 缓存存储目录 (可选，默认使用./cache)
TRADINGAGENTS_CACHE_DIR=./cache

# 日志级别 (DEBUG, INFO, WARNING, ERROR)
TRADINGAGENTS_LOG_LEVEL=INFO

# 禁用Python字节码生成 (可选，用于开发环境)
PYTHONDONTWRITEBYTECODE=1

# ===== 内存和缓存配置 =====

# 🧠 内存功能启用开关 (默认启用)
# 设置为 false 可以禁用ChromaDB内存功能，解决Windows 10兼容性问题
# 推荐Windows 10用户设置为 false
MEMORY_ENABLED=true

# 🔧 最大工作线程数 (可选，默认为CPU核心数)
# Windows 10用户建议设置为较小值，如 2 或 4
# MAX_WORKERS=4

# ===== 数据库配置 =====

# 🔧 数据库启用开关 (默认不启用，系统使用文件缓存)
# 设置为 true 启用对应数据库，false 或不设置则禁用
MONGODB_ENABLED=false
REDIS_ENABLED=false

# 🗄️ MongoDB数据库配置 (用于持久化存储股票数据和分析结果)
# 本地开发: scripts/start_services_alt_ports.bat (端口27018)
# Docker环境: docker-compose up -d (端口27017，主机名mongodb)
MONGODB_HOST=localhost
MONGODB_PORT=27017
MONGODB_USERNAME=admin
MONGODB_PASSWORD=tradingagents123
MONGODB_DATABASE=tradingagents
MONGODB_AUTH_SOURCE=admin

# 📦 Redis缓存配置 (用于高速缓存和会话管理)
# 本地开发: scripts/start_services_alt_ports.bat (端口6380)
# Docker环境: docker-compose up -d (端口6379，主机名redis)
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=tradingagents123
REDIS_DB=0

# ===== 绘图师配置 =====

# 🎨 绘图师智能体启用开关 (默认关闭，需要时启用)
# 设置为 true 启用ChartingArtist可视化功能
CHARTING_ARTIST_ENABLED=false

# 🧠 使用LLM进行图表规格生成 (可选，更智能但成本稍高)
# 设置为 true 使用AI模型自动生成图表配置，false使用预设模板
USE_LLM_FOR_CHART_SPEC=false

# 📊 图表输出目录 (图表文件保存位置)
CHART_OUTPUT_DIR=./data/exports/plots

# ===== Reddit API 配置 (可选) =====
# 用于获取社交媒体情绪数据
# 获取地址: https://www.reddit.com/prefs/apps

# Reddit 客户端ID
REDDIT_CLIENT_ID=your_reddit_client_id

# Reddit 客户端密钥
REDDIT_CLIENT_SECRET=your_reddit_client_secret

# Reddit 用户代理
REDDIT_USER_AGENT=TradingAgents-CN/1.0

# ===== 使用统计和成本跟踪配置 =====

# 🔧 Token使用统计启用开关 (默认启用)
ENABLE_COST_TRACKING=true

# 💰 成本警告阈值 (人民币，默认100元)
COST_ALERT_THRESHOLD=100.0

# 📊 最大使用记录数量 (默认10000条)
MAX_USAGE_RECORDS=10000

# 🗄️ 使用MongoDB存储Token统计数据 (推荐生产环境)
# 设置为 true 启用MongoDB存储，false 使用JSON文件存储
USE_MONGODB_STORAGE=false

# MongoDB连接字符串 (当USE_MONGODB_STORAGE=true时使用)
# 本地MongoDB: mongodb://localhost:27017/
# Docker环境: mongodb://admin:tradingagents123@mongodb:27017/
MONGODB_CONNECTION_STRING=mongodb://admin:tradingagents123@mongodb:27017/

# MongoDB数据库名称
MONGODB_DATABASE_NAME=tradingagents

# ===== 使用说明 =====
# 1. 复制此文件为 .env: cp .env.example .env
# 2. 编辑 .env 文件，填入您的真实API密钥
# 3. 必需配置：至少一个AI模型API密钥 (推荐DeepSeek或Gemini)
# 4. 推荐配置：TUSHARE_TOKEN (用于A股数据) 和 FINNHUB_API_KEY (用于美股数据)
# 5. 运行 python -m cli.main config 检查配置状态
# 6. 运行 python -m cli.main test 验证配置是否正确
#
# ===== API密钥获取链接 =====
# - DeepSeek (推荐，性价比高): https://platform.deepseek.com/
# - SiliconFlow (国产模型聚合): https://siliconflow.cn/
# - Google Gemini (免费额度大): https://ai.google.dev/
# - OpenAI (功能强大): https://platform.openai.com/
# - Tushare (A股数据): https://tushare.pro/
# - FinnHub (美股数据): https://finnhub.io/
#
# ===== Docker 部署说明 =====
# 如果使用 Docker 部署，需要修改以下配置：
# 1. 启用数据库:
#    MONGODB_ENABLED=true
#    REDIS_ENABLED=true
# 2. 修改主机名:
#    MONGODB_HOST=mongodb
#    REDIS_HOST=redis
# 3. 启动服务:
#    docker-compose up -d
# 4. 访问地址:
#    - Web应用: http://localhost:8501
#    - Redis管理: http://localhost:8081
#    - MongoDB管理: http://localhost:8082


# ===== 邮件发送（可选，订阅邮件/即时发送用） =====
# SMTP直连（常见邮箱，如QQ/163/Outlook）：
# SMTP_HOST=smtp.qq.com
# SMTP_PORT=465
# SMTP_USER=your_email@example.com
# SMTP_PASS=your_smtp_auth_code

# 或使用 Brevo HTTP API（推荐，避免SMTP在某些网络环境受限）：
# BREVO_API_KEY=your_brevo_api_key
# BREVO_USE_HTTP_API=true
